(function(){DS._ModifiedRecordsHelpers=Ember.Mixin.create({eachModifiedRecord:function(a,b,c){["created","updated","deleted"].forEach(function(d){a[d].forEach(function(a){b.call(c,d,a)},c)},c)}})})(),function(){var a=Ember.get;DS._InternalSyncSerializer=DS.JSONSerializer.extend({serialize:function(b,c){c=c||{};var d=this.createSerializedForm(),e;return c.includeId&&(e=a(b,"id"))&&this.addId(d,e),this.addAttributes(d,b),this.addRelationships(d,b,c.includeHasMany),d},addId:function(a,b){a.id=b},addAttributes:function(a,b){b.eachAttribute(function(c,d){this.addAttribute(a,b,c,d)},this)},addAttribute:function(b,c,d,e){var f=a(c,d);b[d]=this.serializeValue(f,e.type)},addRelationships:function(a,b,c){b.eachAssociation(function(d,e){e.kind==="hasMany"&&c&&this.addRelationship(a,b,d,e.kind)},this)},addRelationship:function(a,b,c,d){a[c]=b._data[d][c]}})}(),function(){var a=Ember.get,b=Ember.set;DS._ServerStore=DS.Store.extend(DS._ModifiedRerordsHelpers,{init:function(){this._super(),b(this,"internalSerializer",DS._InternalSyncSerializer.create())},copyAndCommit:function(a){var b=this.defaultTransaction;eachModifiedRecord(a,function(a,c){var d=this.createRecord(c.type,c.data);b.removeFromBucket("created",d),b.addToBucket(a,d)},this),this.commit()},downSync:function(){this.adapter.downSync(this)},downSyncRecord:function(b,c,d,e){a(this,"clientStore").downSyncRecord(b,c,d,e,this.simulateLoad)},simulateLoad:function(a,b,c,d){var e=this,f=this.pushData("loading",b,a),g=this.materializeRecord(a,f,b);g.setupDidLoad(function(){e.alsoCommitToClient(a,b,this,d)}),this.load(a,b,c)},alsoCommitToClient:function(b,c,d,e){var f=this.internalSerializer.serialize(d,{includeId:!0});a(this,"clientStore").copyAndCommit(b,c,f,e)},didCompleteDownSync:function(){var b=a(this,"clientStore");b.didCompleteDownSync()},maxModified:function(){return a(this,"clientStore.maxModified")}.property("clientStore.maxModified")})}(),function(){var a=Ember.get;DS.ClientTransaction=DS.Transaction.extend({commit:function(){var b=a(this,"store"),c=this.copyCommitDetails(),d=b.rememberModifiedRecords(c);b.alsoCommitToServer(d),this._super()},copyCommitDetails:function(){return{created:this.bucketForType("created").copy(),updated:this.bucketForType("updated").copy(),deleted:this.bucketForType("deleted").copy()}}})}(),function(){var a=Ember.get,b=Ember.set,c={keyForId:"id",keyForCreated:"created_at",keyForUpdated:"updated_at",keyForDeleted:"deleted_at",keyForMaxModified:"max_modified",downSyncPath:"sync"},d=function(){return{created:Ember.OrderedSet.create(),updated:Ember.OrderedSet.create(),deleted:Ember.OrderedSet.create()}};DS.ClientStore=DS.Store.extend(DS._ModifiedRecordsHelpers,{pendingUpSyncRecords:[],transaction:function(){return DS.ClientTransaction.create({store:this})},normalTransaction:function(){return DS.Transaction.create({store:this})},normalDeleteRecord:function(a){var b=this.normalTransaction();b.add(a),this.deleteRecord(a),b.commit()},findAndDeleteRecord:function(a,b){var c=this.find(a,b);c.setupDidLoad(function(){this.normalDeleteRecord(this)})},alsoCommitToServer:function(b){var c=d(),e=a(this,"serverStore"),f,g,h=this,i=0;b.forEach(function(b){f=this.find(a(b,"recordType"),a(b,"recordId")),i++,f.setupDidLoad(function(){g=h.internalSerializer.serialize(this,{includeId:!0}),c[a(b,"pendingReason")].add({data:g,type:a(b,"recordType")}),i--,i===0&&e.copyAndCommit(c)})},this)},rememberModifiedRecords:function(b){var c=[],d=this.normalTransaction();return eachModifiedRecord(b,function(a,b){c.pushObject(this.createPendingUpSyncRecord(d,a,b))},this),a(this,"pendingUpSyncRecords").pushObjects(c),d.commit(),c},createPendingUpSyncRecord:function(b,c,d){return b.createRecord(DS._PendingUpSyncRecord,{recordId:a(d,"id"),recordType:d.constructor,pendingReason:c})},copyAndCommit:function(a,b,c,d){var e=this.normalTransaction();if(d==="created")e.createRecord(a,c),e.commit();else{var f=this.find(a,b);f.setupDidLoad(function(){e.add(this),this.setProperties(c),e.commit()})}},downSync:function(){this.serverStore.downSync(this)},downSyncRecord:function(b,c,d,e,f){var g=a(this,"serverStore"),h=c.id,i=this.computeModificationKind(d,e),j=d.updatedAt,k=this.deleteMatchingPendingUpSyncRecords(h,i);!k&&i==="deleted"?(this.findAndDeleteRecord(b,h),j=d.deletedAt):(!k&&i==="created"||i==="updated")&&f.call(g,b,h,c,i),this.updateMaxModified(j)},computeModificationKind:function(a,b){return a.deletedAt?"deleted":new Date(a.createdAt)>new Date(b)?"created":"updated"},deleteMatchingPendingUpSyncRecords:function(b,c){var d=a(this,"pendingUpSyncRecords"),e=d.filter(function(d){return a(d,"recordId")===b&&a(d,"pendingReason")===c},this);return e.forEach(function(a){this.normalDeleteRecord(a)},this),d.removeObjects(e),e.length>0},updateMaxModified:function(c){var d=a(this,"maxModified"),e=a(this,"maxModifiedRecord");new Date(c)>new Date(d)&&(this._maxModifiedTransaction.add(e),b(e,"timestamp",c))},maxModified:function(){return a(this,"maxModifiedRecord.timestamp")}.property("maxModifiedRecord.timestamp"),didCompleteDownSync:function(){this._maxModifiedTransaction.commit()},init:function(){this._super(),b(this,"internalSerializer",DS._InternalSyncSerializer.create())},_initialize:function(){var d={};for(var e in c)d[e]=this[e]||c[e];a(this,"serverStore.adapter")._setServerOptions(d),b(this,"_pendingUpSyncRecords",this.findQuery(DS._PendingUpSyncRecord,{})),b(this,"_maxModifiedRecords",this.findQuery(DS._MaxModified,{}))},_onLoadMaxModifiedRecords:function(){var c=a(this,"_maxModifiedRecords");if(!a(c,"isLoaded"))return;this._maxModifiedTransaction=this.normalTransaction();if(a(c,"content.length")>0){var d=c.toArray()[0];this._maxModifiedTransaction.add(d)}else{var d=this._maxModifiedTransaction.createRecord(DS._MaxModified);this._maxModifiedTransaction.commit()}b(this,"maxModifiedRecord",d)}.observes("_maxModifiedRecords.isLoaded"),_onLoadPendingUpSyncRecords:function(){var b=a(this,"_pendingUpSyncRecords");if(!a(b,"isLoaded")||!a(this,"maxModifiedRecord"))return;b&&b.length>0?this.alsoCommitToServer(b):this.downSync(),a(this,"pendingUpSyncRecords").pushObjects(b)}.observes("_pendingUpSyncRecords.isLoaded","maxModifiedRecord")})}(),function(){var a=Ember.get;DS.Model.reopen({setupDidLoad:function(a){this.didLoadStrict=a,this.addObserver("isLoaded",this,"runOnceOnLoadAndBecomeClean"),this.addObserver("isDirty",this,"runOnceOnLoadAndBecomeClean"),this.runOnceOnLoadAndBecomeClean()},runOnceOnLoadAndBecomeClean:function(){a(this,"isLoaded")&&!a(this,"isDirty")&&(this.didLoadStrict(),this.removeObserver("isLoaded",this,"runOnceOnLoadAndBecomeClean"),this.removeObserver("isDirty",this,"runOnceOnLoadAndBecomeClean"),this.didLoadStrict=Ember.K)},didLoadStrict:Ember.K})}(),function(){var a=Ember.get,b=Ember.set;Ember.Application.reopen({ready:function(){var a=this.router.store;a._initialize(),this._super()}}),Ember.onLoad("Ember.Application",function(c){Ember.Application.registerInjection({name:"setupSynchronizedStore",after:["store"],injection:function(c,d,e){if(!d)return;if(e==="Store"){var f=a(d,"store"),g=f.revision,h=a(f,"adapter.mappings");Ember.assert("Currently you need to provide mappings of JSON keys to modelTypes (e.g., persons: App.Person).But your adapter's mappings property is null.",!!h);var i=DS._ServerAdapter.create({mappings:h}),j=DS._ServerStore.create({adapter:i,revision:g,clientStore:f});b(f,"serverStore",j)}}})})}(),function(){DS._ServerSerializer=DS.RESTSerializer.extend({addId:function(a,b,c){var d=this.keyForId||"id";a[d]=c}})}(),function(){var a=Ember.get,b=Ember.set;DS._ServerAdapter=DS.RESTAdapter.extend({serializer:DS._ServerSerializer,init:function(){this._super(),["didCreateRecord","didCreateRecords","didUpdateRecord","didUpdateRecords","didDeleteRecord","didDeleteRecords"].forEach(function(a){this[a]=function(a,b,c,d){this.didUpSync(a)}},this)},_setServerOptions:function(b){this.setProperties(b),a(this,"serializer").setProperties(b)},didUpSync:function(a){this.downSync(a)},downSync:function(b){var c=this.downSyncPath,d={};d.data={},d.data[this.keyForMaxModified]=a(b,"maxModified"),d.success=function(a){this.didDownSync(b,a)},this.ajax(c,"POST",d)},didDownSync:function(b,c){var d,e,f,g=a(b,"maxModified");for(var h in c)d=this.keyToType(h),e=Ember.isArray(c[h])?c[h]:[c[h]],e.forEach(function(a){var c=this.getTimestamps(a);b.downSyncRecord(d,a,c,g)},this);b.didCompleteDownSync()},keyToType:function(a){return Ember.get(this.mappings[a]||this.mappings[this.pluralize(a)])},getTimestamps:function(a){return{createdAt:a[this.keyForCreated],updatedAt:a[this.keyForUpdated],deletedAt:a[this.keyForDeleted]}}})}(),function(){}(),function(){DS._MaxModified=DS.Model.extend({timestamp:DS.attr("string",{defaultValue:(new Date(0)).toString()})})}(),function(){DS._PendingUpSyncRecord=DS.Model.extend({recordId:DS.attr("string"),recordType:DS.attr("string"),pendingReason:DS.attr("string")})}(),function(){}(),function(){}()